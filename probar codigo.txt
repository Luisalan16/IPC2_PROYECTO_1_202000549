import xml.etree.ElementTree as ET
from graphviz import Digraph
import time

class XMLReader:
    def load_file(self):
        try:
            route_doc = input("Por favor, ingresa la ruta del archivo: \n")
            tree = ET.parse(route_doc)
            root = tree.getroot()
            print("\nCargando....")
            time.sleep(1)
            print("Archivo cargado con éxito! \n")
            return root
        except ET.ParseError:
            print("Error al cargar archivo.")
            time.sleep(2)
            return None

class GraphGenerator:
    def __init__(self):
        self.graph = Digraph('Matrix', format='png')  # Crear el grafo con el nombre 'Matrix'
    
    def generate_graph(self, root):
        if root is None:
            return
        
        for lista_senal in root.findall('senal'):
            nombre = lista_senal.get('nombre')
            tiempo = lista_senal.get('t')
            amplitud = lista_senal.get('A')
            
            self.graph.node(nombre, label=nombre, style='filled', fillcolor='wheat')
            self.graph.edge('Mat', nombre)
            self.graph.edge(nombre, 't')
            self.graph.edge(nombre, 'A')
            
            for lista_datos in lista_senal.findall('dato'):
                dato_value = lista_datos.text
                self.graph.node(dato_value, label=dato_value, style='filled', fillcolor='wheat')
                self.graph.edge(nombre, dato_value)
        
        # Guardar el grafo en un archivo
        self.graph.render('grafo', cleanup=True)
        print("Grafo generado y guardado como 'grafo.png'")

# Crear una instancia de XMLReader y GraphGenerator
xml_reader = XMLReader()
graph_generator = GraphGenerator()

# Cargar el archivo XML usando el método de XMLReader
root = xml_reader.load_file()

# Generar el grafo usando el método de GraphGenerator
graph_generator.generate_graph(root)
